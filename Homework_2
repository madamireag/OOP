#include <iostream>
#include <fstream>
#include <string>

using namespace std;

class ExceptieEmail {
public:
	string mesaj;
	int codEroare;

	ExceptieEmail(string msj, int cod) {
		this->mesaj = msj;
		this->codEroare = cod;
	}
};

class Email {
	const int id;
	string subject = "";
	char from[50] = "";
	string *to = NULL;
	int nrAdrese = 0;
	bool *confirmari = NULL;
	char* continut = nullptr;
public:
	Email() :id(0) {

	}
	Email(int id, string subiect) :id(id) {
		this->subject = subiect;
	}
	Email(int id, string subiect, const char* from, int nrAdrese) :id(id) {
		this->subject = subiect;
		setFrom(from);
		this->nrAdrese = nrAdrese;

	}


	void setFrom(const char* adresa) {
		if (adresa != NULL && strlen(adresa) <= 49) {
			strcpy(this->from, adresa);
		}
		else

			throw ExceptieEmail("Eroare adresa from", 10);
	}

	~Email()
	{
		if (to)
			delete[] to;
		if (confirmari)
			delete[] confirmari;
		if (continut)
			delete[] continut;

	}
	Email(const Email& e) :id(e.id) {
		this->subject = e.subject;
		strcpy(this->from, e.from);
		if (e.to) {
			this->to = new string[e.nrAdrese];
			for (int i = 0; i < e.nrAdrese; i++)
				this->to[i] = e.to[i];
		}
		if (e.confirmari) {
			this->confirmari = new bool[e.nrAdrese];
			for (int i = 0; i < e.nrAdrese; i++)
				this->confirmari[i] = e.confirmari[i];
		}
		if (e.continut) {
			this->continut = new char[strlen(e.continut) + 1];
			strcpy(this->continut, e.continut);
		}
		this->nrAdrese = e.nrAdrese;
	}
	Email operator=(const Email& e) {
		if (this->to)
			delete[] to;
		if (this->confirmari)
			delete[] confirmari;
		if (this->continut)
			delete[] continut;
		this->subject = e.subject;
		strcpy(this->from, e.from);
		if (e.to) {
			this->to = new string[e.nrAdrese];
			for (int i = 0; i < e.nrAdrese; i++)
				this->to[i] = e.to[i];
		}

		if (e.confirmari)
		{
			this->confirmari = new bool[e.nrAdrese];
			for (int i = 0; i < e.nrAdrese; i++)
				this->confirmari[i] = e.confirmari[i];
		}
		if (e.continut)
		{
			this->continut = new char[strlen(e.continut) + 1];
			strcpy(this->continut, e.continut);
		}
		this->nrAdrese = e.nrAdrese;
		return *this;
	}
	void editareContinut(const char* continut) {
		if (this->continut) {
			char* continutNou = new char[strlen(this->continut) +
				strlen(continut) + 1];

			continutNou[0] = '\0';
			strcat(continutNou, this->continut);

			//strcpy(continutNou, this->continut);
			strcat(continutNou, continut);
			delete[] this->continut;
			this->continut = continutNou;
		}
		else
		{
			this->continut = new char[strlen(continut) + 1];
			strcpy(this->continut, continut);
		}
	}
	void operator+=(string adresa) {
		int indexAt = adresa.find("@");
		int indexPunct = adresa.find(".");

		if (indexAt == -1 || indexPunct == -1) {
			throw ExceptieEmail("Adresa gresita", 5);
		}
		if (indexAt > adresa.find_last_of("."))
			throw ExceptieEmail("Adresa gresita", 5);

		string* newTo = new string[this->nrAdrese + 1];
		bool* newConf = new bool[this->nrAdrese + 1];

		for (int i = 0; i < this->nrAdrese; i++) {
			newTo[i] = this->to[i];
			newConf[i] = this->confirmari[i];
		}

		newTo[this->nrAdrese] = adresa;
		newConf[this->nrAdrese] = false;

		delete[] this->to;
		delete[] this->confirmari;

		this->to = newTo;
		this->confirmari = newConf;

		this->nrAdrese += 1;
	}
	bool& operator[](string email) {
		int indexCautat = -1;
		for (int i = 0; i < this->nrAdrese; i++) {
			if (email == this->to[i]) {
				indexCautat = i;
				break;
			}
		}

		if (indexCautat != -1) {
			return this->confirmari[indexCautat];
		}
		else
			throw new ExceptieEmail("Destinatar invalid", 2);
	}
	void operator<<(const char* text) {
		if (this->continut) {
			char* continutNou =
				new char[strlen(this->continut) +
				strlen(text) + 1];

			//continutNou[0] = '\0';
			//strcat(continutNou, this->continut);

			strcpy(continutNou, this->continut);

			strcat(continutNou, text);

			delete[] this->continut;
			this->continut = continutNou;
		}
		else
		{
			this->continut = new char[strlen(text) + 1];
			strcpy(this->continut, text);
		}
	}

	static void outDateEmail(Email *e) {
		ofstream raport("RaportEmail.txt", ios::out | ios::app);

		//for (int i = 0; i < sizeof(e) / sizeof(Email); i++)
		//{
		raport << "Email " << e->id << " from " << e->from;
		raport << " to ";

		for (int j = 0; j < e->nrAdrese; j++)
			raport << e->to[j] << " ";

		raport << endl << "Confirmari de la: ";

		for (int j = 0; j < e->nrAdrese; j++)
			if (e->confirmari[j])raport << e->to[j] << " ";

		raport << endl << "Subject: " << e->subject;
		if (e->continut)
			raport << endl << "Continut:" << endl << e->continut;

		raport << endl << "___________________________________________" << endl;

		//}
		raport.close();
	}

	friend void operator<<(ostream& out, Email& email);
};
void operator<<(ostream& out, Email& email) {
	out << endl << "-------------------------";
	out << endl << "Id: " << email.id;
	out << endl << "Subject: " << email.subject;
	out << endl << "From: " << email.from;
	out << endl << "To: ";
	if (email.to)
	{
		for (int i = 0; i < email.nrAdrese; i++) {
			string confirmare = "";
			confirmare = email.confirmari[i] == true ? "(*)" : "";
			out << email.to[i] << confirmare << "; ";
		}
	}
	out << endl << "Continut:" << endl;
	if (email.continut != NULL) {
		out << email.continut;
	}
	else
		out << endl << "Fara continut";

}
int main() {
	Email email;
	Email email1(1, "Subiecte examen", "oana@email.com", 0);
	email1 += "irina@email.com";
	email1.editareContinut("Salut");
	email1.editareContinut("\nAi subiectele la examen?");
	Email email2(2, "Programare Examen", "ana@ase.com", 0);
	email2 += "alin@ase.com";
	email2 += "bianca@ase.com";
	email2.editareContinut("Salut !");
	email2.editareContinut("Cand este programat examenul ?");
	email2["bianca@ase.com"] = true;
	//1
	cout << endl << "1.Vector dinamic de email-uri: " << endl;
	Email *lista[3];
	lista[0] = &email;
	lista[1] = &email1;
	lista[2] = &email2;
	for (int i = 0; i < 3; i++)
		cout << *lista[i];
	//2
	cout <<endl<< "2. Raport in fisier txt(RaportEmailuri.txt)" << endl;
	Email::outDateEmail(&email);
	Email::outDateEmail(&email1);
	Email::outDateEmail(&email2);
	
}
